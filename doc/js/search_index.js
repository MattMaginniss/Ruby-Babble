var search_data = {"index":{"searchIndex":["babble","tilebag","tilegroup","tilerack","whenconvertingtilegrouptostring","whendrawingtiles","whenfindingnumberoftilesneeded","whengettingpoints","whenremovingwordsfromtileracks","whenscoringwords","whenseeingifatilerackhasthetilesneededtomakewords","word","append()","draw_tile()","empty?()","get_tiles()","has_tiles_for?()","new()","new()","new()","new()","new()","number_of_tiles_needed()","points_for()","remove()","remove_word()","run()","score()","setup()","setup()","setup()","setup()","setup()","setup()","test_can_remove_a_word_whose_letters_are_in_order_on_the_rack()","test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack()","test_can_remove_word_with_duplicate_letters()","test_can_remove_word_without_removing_unneeded_duplicate_letters()","test_confirm_point_values()","test_convert_empty_group_to_string()","test_convert_multi_tile_group_to_string()","test_convert_multi_tile_group_with_repeating_values_to_string()","test_convert_single_tile_group_to_string()","test_empty_tile_rack_should_need_max_tiles()","test_empty_word_should_have_score_of_zero()","test_has_proper_number_of_tiles()","test_has_proper_tile_distribution()","test_rack_contains_a_word_with_duplicate_letters()","test_rack_contains_some_but_not_all_needed_letters()","test_rack_doesnt_contain_any_needed_letters()","test_rack_doesnt_contain_enough_duplicate_letters()","test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates()","test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates()","test_score_a_one_tile_word()","test_score_a_word_with_multiple_different_tiles()","test_score_a_word_with_recurring_tiles()","test_that_full_tile_rack_doesnt_need_any_tiles()","test_tile_rack_with_one_tile_should_need_max_minus_one_tiles()","test_tile_rack_with_several_tiles_should_need_some_tiles()","to_s()","gemfile","gemfile.lock","rakefile"],"longSearchIndex":["babble","tilebag","tilegroup","tilerack","whenconvertingtilegrouptostring","whendrawingtiles","whenfindingnumberoftilesneeded","whengettingpoints","whenremovingwordsfromtileracks","whenscoringwords","whenseeingifatilerackhasthetilesneededtomakewords","word","tilegroup#append()","tilebag#draw_tile()","tilebag#empty?()","tilegroup#get_tiles()","tilerack#has_tiles_for?()","babble::new()","tilebag::new()","tilegroup::new()","tilerack::new()","word::new()","tilerack#number_of_tiles_needed()","tilebag::points_for()","tilegroup#remove()","tilerack#remove_word()","babble#run()","word#score()","whenconvertingtilegrouptostring#setup()","whendrawingtiles#setup()","whenfindingnumberoftilesneeded#setup()","whenremovingwordsfromtileracks#setup()","whenscoringwords#setup()","whenseeingifatilerackhasthetilesneededtomakewords#setup()","whenremovingwordsfromtileracks#test_can_remove_a_word_whose_letters_are_in_order_on_the_rack()","whenremovingwordsfromtileracks#test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack()","whenremovingwordsfromtileracks#test_can_remove_word_with_duplicate_letters()","whenremovingwordsfromtileracks#test_can_remove_word_without_removing_unneeded_duplicate_letters()","whengettingpoints#test_confirm_point_values()","whenconvertingtilegrouptostring#test_convert_empty_group_to_string()","whenconvertingtilegrouptostring#test_convert_multi_tile_group_to_string()","whenconvertingtilegrouptostring#test_convert_multi_tile_group_with_repeating_values_to_string()","whenconvertingtilegrouptostring#test_convert_single_tile_group_to_string()","whenfindingnumberoftilesneeded#test_empty_tile_rack_should_need_max_tiles()","whenscoringwords#test_empty_word_should_have_score_of_zero()","whendrawingtiles#test_has_proper_number_of_tiles()","whendrawingtiles#test_has_proper_tile_distribution()","whenseeingifatilerackhasthetilesneededtomakewords#test_rack_contains_a_word_with_duplicate_letters()","whenseeingifatilerackhasthetilesneededtomakewords#test_rack_contains_some_but_not_all_needed_letters()","whenseeingifatilerackhasthetilesneededtomakewords#test_rack_doesnt_contain_any_needed_letters()","whenseeingifatilerackhasthetilesneededtomakewords#test_rack_doesnt_contain_enough_duplicate_letters()","whenseeingifatilerackhasthetilesneededtomakewords#test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates()","whenseeingifatilerackhasthetilesneededtomakewords#test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates()","whenscoringwords#test_score_a_one_tile_word()","whenscoringwords#test_score_a_word_with_multiple_different_tiles()","whenscoringwords#test_score_a_word_with_recurring_tiles()","whenfindingnumberoftilesneeded#test_that_full_tile_rack_doesnt_need_any_tiles()","whenfindingnumberoftilesneeded#test_tile_rack_with_one_tile_should_need_max_minus_one_tiles()","whenfindingnumberoftilesneeded#test_tile_rack_with_several_tiles_should_need_some_tiles()","tilegroup#to_s()","","",""],"info":[["Babble","","Babble.html","","<p>Class that is the driver for the program.\n"],["TileBag","","TileBag.html","","<p>Class that represents a bag of letter tiles for Scrabble\n"],["TileGroup","","TileGroup.html","","<p>Class that represents a group of letter tiles for Scrabble\n"],["TileRack","","TileRack.html","","<p>Class that represents a group of letters that form a tile rack\n"],["WhenConvertingTileGroupToString","","WhenConvertingTileGroupToString.html","","<p>Test class for the TileGroup&#39;s ToString Method\n"],["WhenDrawingTiles","","WhenDrawingTiles.html","","<p>Test class for the Tile Bag&#39;s DrawTile method.\n"],["WhenFindingNumberOfTilesNeeded","","WhenFindingNumberOfTilesNeeded.html","","<p>Test class for the Tile Rack&#39;s number_of_tiles_needed method\n"],["WhenGettingPoints","","WhenGettingPoints.html","","<p>Test class for the TileBag&#39;s points for method.\n"],["WhenRemovingWordsFromTileRacks","","WhenRemovingWordsFromTileRacks.html","","<p>Test class for the Tild Rack&#39;s remove_word method\n"],["WhenScoringWords","","WhenScoringWords.html","","<p>Test class for the Word&#39;s score method\n"],["WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html","","<p>Test class for the Tild Rack&#39;s has_tiles_for? method\n"],["Word","","Word.html","","<p>Class that represents a group of letters that form a word\n"],["append","TileGroup","TileGroup.html#method-i-append","(tile)","<p>This will append a tile to the array only if it is input as a symbol\n"],["draw_tile","TileBag","TileBag.html#method-i-draw_tile","()","<p>This will shuffle the array of tiles, remove and return  the tile on the\nend of the shuffled array.\n"],["empty?","TileBag","TileBag.html#method-i-empty-3F","()","<p>This method returns whether the bag is out of tiles.\n"],["get_tiles","TileGroup","TileGroup.html#method-i-get_tiles","()","<p>This will get all the tiles array and return it\n"],["has_tiles_for?","TileRack","TileRack.html#method-i-has_tiles_for-3F","(text)","<p>This method will take a word and check to see if there are enough tiles to\nproperly make it.\n"],["new","Babble","Babble.html#method-c-new","()","<p>This will initialize the babble driver class.\n"],["new","TileBag","TileBag.html#method-c-new","()","<p>This method initializes an object of the type TileBag\n"],["new","TileGroup","TileGroup.html#method-c-new","()","<p>This method initializes an object of the type TileGroup\n"],["new","TileRack","TileRack.html#method-c-new","()","<p>This initializes an object with the type Tile Rack that is child of\nTileGroup\n"],["new","Word","Word.html#method-c-new","()","<p>This initializes an object with the type Word\n"],["number_of_tiles_needed","TileRack","TileRack.html#method-i-number_of_tiles_needed","()","<p>This method will return the number of tiles needed to be drawn to have a\nfull tile rack.\n"],["points_for","TileBag","TileBag.html#method-c-points_for","(tile)","<p>Class function to get the value for the input tile.\n"],["remove","TileGroup","TileGroup.html#method-i-remove","(tile)","<p>This will find the first instance of the input symbol, remove it from the\narray and letter\n"],["remove_word","TileRack","TileRack.html#method-i-remove_word","(text)","<p>This method will remove and return the word from the tile array.\n"],["run","Babble","Babble.html#method-i-run","()","<p>The main program loop.\n"],["score","Word","Word.html#method-i-score","()","<p>This will calculate and return the point value/score of the letters\ncontained in the word\n"],["setup","WhenConvertingTileGroupToString","WhenConvertingTileGroupToString.html#method-i-setup","()","<p>This method sets up the test class\n"],["setup","WhenDrawingTiles","WhenDrawingTiles.html#method-i-setup","()","<p>This method sets up the test class\n"],["setup","WhenFindingNumberOfTilesNeeded","WhenFindingNumberOfTilesNeeded.html#method-i-setup","()","<p>This method sets up the test class\n"],["setup","WhenRemovingWordsFromTileRacks","WhenRemovingWordsFromTileRacks.html#method-i-setup","()","<p>This method sets up the test class\n"],["setup","WhenScoringWords","WhenScoringWords.html#method-i-setup","()","<p>This method sets up the test class\n"],["setup","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html#method-i-setup","()","<p>This method sets up the test class\n"],["test_can_remove_a_word_whose_letters_are_in_order_on_the_rack","WhenRemovingWordsFromTileRacks","WhenRemovingWordsFromTileRacks.html#method-i-test_can_remove_a_word_whose_letters_are_in_order_on_the_rack","()","<p>Test that a word can be removed if the tiles are in order on the rack.\n"],["test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack","WhenRemovingWordsFromTileRacks","WhenRemovingWordsFromTileRacks.html#method-i-test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack","()","<p>Test that a word can be removed if the tiles are not in order on the rack.\n"],["test_can_remove_word_with_duplicate_letters","WhenRemovingWordsFromTileRacks","WhenRemovingWordsFromTileRacks.html#method-i-test_can_remove_word_with_duplicate_letters","()","<p>Test that a word with some duplicate letters can be removed from the rack.\n"],["test_can_remove_word_without_removing_unneeded_duplicate_letters","WhenRemovingWordsFromTileRacks","WhenRemovingWordsFromTileRacks.html#method-i-test_can_remove_word_without_removing_unneeded_duplicate_letters","()","<p>Test that a word can be removed without removing duplicate letters being\nremoved from the rack.\n"],["test_confirm_point_values","WhenGettingPoints","WhenGettingPoints.html#method-i-test_confirm_point_values","()","<p>This tests if you will get the correct value for the 26 different tiles.\n"],["test_convert_empty_group_to_string","WhenConvertingTileGroupToString","WhenConvertingTileGroupToString.html#method-i-test_convert_empty_group_to_string","()","<p>This tests if you will get an empty string when the tile group has no tiles\nin it\n"],["test_convert_multi_tile_group_to_string","WhenConvertingTileGroupToString","WhenConvertingTileGroupToString.html#method-i-test_convert_multi_tile_group_to_string","()","<p>This tests to see if a tile group with multiple tiles in it will return all\nthe tiles correctly in a …\n"],["test_convert_multi_tile_group_with_repeating_values_to_string","WhenConvertingTileGroupToString","WhenConvertingTileGroupToString.html#method-i-test_convert_multi_tile_group_with_repeating_values_to_string","()","<p>this tests the to_s method to see if it correctly outputs a string with all\nthe tiles even if some are …\n"],["test_convert_single_tile_group_to_string","WhenConvertingTileGroupToString","WhenConvertingTileGroupToString.html#method-i-test_convert_single_tile_group_to_string","()","<p>This tests to see if the to_s method will return a string with all the\ntiles in the tile group\n"],["test_empty_tile_rack_should_need_max_tiles","WhenFindingNumberOfTilesNeeded","WhenFindingNumberOfTilesNeeded.html#method-i-test_empty_tile_rack_should_need_max_tiles","()","<p>Test to make sure an empty tile rack needs 7 tiles.\n"],["test_empty_word_should_have_score_of_zero","WhenScoringWords","WhenScoringWords.html#method-i-test_empty_word_should_have_score_of_zero","()","<p>This will test to see if a word with no tiles input will return a 0 value\nfor its score\n"],["test_has_proper_number_of_tiles","WhenDrawingTiles","WhenDrawingTiles.html#method-i-test_has_proper_number_of_tiles","()","<p>This tests that there can be exactly 98 tiles drawn and at the end the bag\nwill be empty. Through each …\n"],["test_has_proper_tile_distribution","WhenDrawingTiles","WhenDrawingTiles.html#method-i-test_has_proper_tile_distribution","()","<p>This tests to see the tiles in the bag are distributed as specified by\nscrabble rules.\n"],["test_rack_contains_a_word_with_duplicate_letters","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html#method-i-test_rack_contains_a_word_with_duplicate_letters","()","<p>Test that a rack has the correct tiles even if it has duplicate tiles.\n"],["test_rack_contains_some_but_not_all_needed_letters","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html#method-i-test_rack_contains_some_but_not_all_needed_letters","()","<p>Test that a rack doesn&#39;t have needed tiles when it only has some.\n"],["test_rack_doesnt_contain_any_needed_letters","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html#method-i-test_rack_doesnt_contain_any_needed_letters","()","<p>Test that a rack does not have the correct tiles it has no needed letters.\n"],["test_rack_doesnt_contain_enough_duplicate_letters","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html#method-i-test_rack_doesnt_contain_enough_duplicate_letters","()","<p>Test that a rack doesn&#39;t have the correct tiles because it doesn&#39;t\nhave enough duplicate tiles. …\n"],["test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html#method-i-test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates","()","<p>Test that a rack has the correct tiles when the tiles are in order with no\nduplicates.\n"],["test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords","WhenSeeingIfATileRackHasTheTilesNeededToMakeWords.html#method-i-test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates","()","<p>Test that a rack has the correct tiles when the tiles are not in order with\nno duplicates.\n"],["test_score_a_one_tile_word","WhenScoringWords","WhenScoringWords.html#method-i-test_score_a_one_tile_word","()","<p>This will test to see if a word with one tile in it will return a value\nequivalent to the value of that …\n"],["test_score_a_word_with_multiple_different_tiles","WhenScoringWords","WhenScoringWords.html#method-i-test_score_a_word_with_multiple_different_tiles","()","<p>This will test to see if a word with multiple tiles in it will return a\nvalue equivalent to the sum of …\n"],["test_score_a_word_with_recurring_tiles","WhenScoringWords","WhenScoringWords.html#method-i-test_score_a_word_with_recurring_tiles","()","<p>This will test to see if a word with multiple tiles in it will return a\nvalue equivalent to the sum of …\n"],["test_that_full_tile_rack_doesnt_need_any_tiles","WhenFindingNumberOfTilesNeeded","WhenFindingNumberOfTilesNeeded.html#method-i-test_that_full_tile_rack_doesnt_need_any_tiles","()","<p>Test a tile rack with all 7 tiles need 0 tiles.\n"],["test_tile_rack_with_one_tile_should_need_max_minus_one_tiles","WhenFindingNumberOfTilesNeeded","WhenFindingNumberOfTilesNeeded.html#method-i-test_tile_rack_with_one_tile_should_need_max_minus_one_tiles","()","<p>Test that the tile rack with 1 tile needs 6 more.\n"],["test_tile_rack_with_several_tiles_should_need_some_tiles","WhenFindingNumberOfTilesNeeded","WhenFindingNumberOfTilesNeeded.html#method-i-test_tile_rack_with_several_tiles_should_need_some_tiles","()","<p>Test that a tile rack with several(3) tiles, need 4 tiles.\n"],["to_s","TileGroup","TileGroup.html#method-i-to_s","()","<p>This will return a string that has all the values of the tiles array\nseparated by commas\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org” gem &#39;spellchecker&#39;\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  spellchecker (0.1.5)</pre>\n<p>PLATFORMS\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rake/testtask&#39; require &#39;../rabble/babble.rb&#39;\n<p>Rake::TestTask.new do |t|\n\n<pre>t.pattern ...</pre>\n"]]}}